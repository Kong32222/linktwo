'''
在 2000 多年前的古希腊,数学家厄拉多塞在写一本《算术入门》的书。在写到“数的整除”部分时,
他想:怎样才能找到一种最简单的判断素数的方法呢?左思右想也没有结果,于是他就去郊外散步。
他边走边思考,竟然走到了一家坊。坊的工人们正在忙碌着,有的搬运麦子,有的面,有的筛粉。
厄拉多塞眼前突然一亮,心想:是否可以用筛选
的方法来挑选素数?把合数像筛粉一样筛掉,留下的肯定就是素数了,
厄拉多塞受此启发创造了这样一种与众不同的寻找素数的
方法:先将2~n的各个自然数放人表中,然后在2的上面画一个圆圈,再划去2的倍数;
第一个既未画圈又没有被划去的数是3,将它画圈,再划去3的倍数;
现在既未画圈又没有被划去的第一个数是5,将它画圈,并划去5的倍数……以此类推,直到所有小于或等于"的各数都画了圈或被划去为止。
这时,表中画了圈的以及未划去的那些数正好就是小于”的素数。这个简单而高效的寻找素数的方法被称作厄拉多塞筛法。

请编程实现厄拉多塞筛法,输入一个自然数 ”,并找出 2~n之间的所有素数
'''
 

num = input("请输入一个自然数：")
a = list(range(2, int(num)+1))

i = 0
while i<len(a):
    j = i+ 1  #j 一定在i 的后面, j是分子
    while j <len(a):
        if (a[j]% a[i] == 0) :
            a.pop(j)
        else:
            j += 1

    i += 1
print(a)

